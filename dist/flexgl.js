!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";function n(e,t,r,i){var a=this instanceof n?this:{},o=e;function u(e){var t=[];return e.forEach(function(e){t=t.concat(e)}),t}return a.create=function(e,t,r){Array.isArray(r)&&(r.filter(function(e){return Array.isArray(e)})&&(r=u(r)));return a[e]={type:t,name:e,data:r,location:null,size:parseInt(t.slice(3,4))||parseInt(t.slice(4,5))||1},a[e].link=function(e){return void 0!==this.data&&null!==this.data&&(this.location=o.getUniformLocation(e,this.name),function(){var e,t=this.type,r=this.location,n=this.size,i=this.data;Array.isArray(i)&&i.filter(function(e){return Array.isArray(e)})&&(i=u(i)),"float"!=t&&"int"!=t||Array.isArray(i)||ArrayBuffer.isView(i)||(i=[i]),"vec"==t.slice(0,3)||"float"==t?(e=new Float32Array(i),o["uniform"+n+"fv"](r,e)):"ivec"==t.slice(0,4)||"int"==t?(e=new Int32Array(i),o["uniform"+n+"iv"](r,e)):"mat"==t.slice(0,3)?(e=new Float32Array(i),o["uniformMatrix"+n+"fv"](r,!1,e)):"sampler2D"==t&&i.hasOwnProperty("resourceType")&&"texture"==i.resourceType&&(o.activeTexture(o.TEXTURE0+i.index),o.bindTexture(o.TEXTURE_2D,i.ptr),o.uniform1i(r,i.index))}.call(this)),this},a[e].load=function(e){return this.data=e,this},a[e].header=function(){var e="uniform "+this.type+" "+this.name,r=0;return"sampler2D"!=this.type&&(r=this.data.length/this.size),r>1&&"mat4"!=t&&(e+="["+r+"]"),e+";\n"},a[e]},a}function i(e){var t=this instanceof i?this:{},r=e,a=0;function o(e,n){var i=r[t[e].type.toUpperCase()],a=r[t[e].channel.toUpperCase()],o=t[e].dim[0],u=t[e].dim[1];t[e].data=n,r.bindTexture(r.TEXTURE_2D,t[e].ptr),r.texImage2D(r.TEXTURE_2D,0,a,o,u,0,a,i,n),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),r.bindTexture(r.TEXTURE_2D,null)}return t.create=function(i,u,f,c,s,l){var d=t.hasOwnProperty(i)?t[i].index:a++;return t[i]={name:i,index:d,type:u||"float",dim:f||[512,512],channel:c||"alpha",data:null,location:null,sampler:l||null,ptr:r.createTexture()},o(i,s),null===t[i].sampler?t[i].sampler=n(r).create(i,"sampler2D",t[i]):t[i].sampler.data=t[i],t[i].link=function(e){return null!==this.data&&(void 0!==this.sampler.data&&null!==this.sampler.data||(this.sampler.data=t[i]),this.sampler.link(e)),this},t[i].load=function(e){return o(this.name,e),this},t[i].copyFromFBO=function(){r.bindTexture(r.TEXTURE_2D,this.ptr),r.copyTexImage2D(r.TEXTURE_2D,0,r.RGBA,0,0,this.dim[0],this.dim[1],0),r.bindTexture(r.TEXTURE_2D,null)},t[i].update=function(e,n,i){return function(e,n,i,a){var o=r[t[e].type.toUpperCase()],u=r[t[e].channel.toUpperCase()],f=a[0]||t[e].dim[0],c=a[1]||t[e].dim[1];r.bindTexture(r.TEXTURE_2D,t[e].ptr),r.texSubImage2D(r.TEXTURE_2D,0,i[0],i[1],f,c,u,o,n),r.bindTexture(r.TEXTURE_2D,null)}(this.name,e,n,i),this},t[i].resize=function(e,t){this.dim=e,o(this.name,t)},t[i].delete=function(){e.deleteTexture(this.ptr)},t[i].header=function(){return this.name==this.sampler.name?"uniform sampler2D "+this.sampler.name+";\n":""},t[i]},t}function a(e){var t=this instanceof a?this:{},r={};t.uniform=new n(e),t.attribute=new function e(t){var r=this instanceof e?this:{},n=t,i=0;function a(e,t){(Array.isArray(t)||ArrayBuffer.isView(t))&&(ArrayBuffer.isView(t)||(t=new Float32Array(t)),r[e].data=t,n.bindBuffer(n.ARRAY_BUFFER,r[e].ptr),n.bufferData(n.ARRAY_BUFFER,t,n.STATIC_DRAW))}return r.create=function(e,t,o){return r[e]={name:e,type:t||"float",data:null,location:i++,ptr:n.createBuffer(),size:parseInt(t.slice(3,4))||1},null!==o&&o.length&&a(e,o),r[e].link=function(e){return n.bindBuffer(n.ARRAY_BUFFER,this.ptr),this.location=n.getAttribLocation(e,this.name),n.vertexAttribPointer(this.location,this.size,n.FLOAT,!1,0,0),n.enableVertexAttribArray(this.location),this},r[e].load=function(e){return a(this.name,e),this},r[e].header=function(){return"attribute "+this.type+" "+this.name+";\n"},r[e].delete=function(){n.deleteBuffer(this.ptr)},r[e]},r}(e),t.texture=new i(e),t.varying=new function e(t){var r=this instanceof e?this:{};return r.create=function(e,t,n){return r[e]={name:e,type:t||"float",size:n||1},r[e].link=function(){},r[e].header=function(){var e="varying "+this.type+" "+this.name;return this.size>1&&(e+="["+this.size+"]"),e+";\n"},r[e]},r}(e),t.subroutine=new function e(){var t=this instanceof e?this:{};return t.create=function(e,r,n){return t[e]={name:e,type:r||"float",fn:n,resourceType:"subroutine"},t[e].link=function(e){return this},t[e].load=function(r){return t[e].fn=r,this},t[e].header=function(){return this.fn.toString()},t[e]},t};var o=["uniform","attribute","texture","varying","subroutine"];return t.allocate=function(e,n){if(-1===o.indexOf(e))throw Error("Error: Invalid resource type: "+e);var i=t[e].create.apply(null,Array.prototype.slice.call(arguments,1));return i.resourceType=e,r[i.name]=i,r.hasOwnProperty(i.name)||Object.defineProperty(r,i.name,{get:function(){return r[i.name]},set:function(e){r[i.name].load(e)}}),i},t.link=function(e,t){(Array.isArray(t)?t:Object.keys(r)).forEach(function(t){r.hasOwnProperty(t)&&r[t].link(e)})},t.get=function(e){return r[e]},t.create=t.allocate,t}function o(e,t){var r=this instanceof o?this:{},n=e,i=t,a=n._dict||{};r.vertex={},r.fragment={};var u={vertex:n.VERTEX_SHADER,fragment:n.FRAGMENT_SHADER};function f(e,t,r){var n=e+" "+t+"("+function(e){var t=Object.keys(a);if(t.length>0){var r=new RegExp("\\$\\(("+t.join("|")+")\\)","g");e=e.replace(r,function(e){return a[e.slice(2,e.length-1)]})}return e}(r.toString()).replace(/var\s+([\w|\d]+)\s*=\s*new\s+([\w|\d]+)\((.*)\)/g,function(e,t,r,n){return(n?[r.toLowerCase(),t,"=",n]:[r.toLowerCase(),t]).join(" ")}).replace(/for\s*\(\s*var\s+/g,"for(int ").replace(/var\s/g,"float ").replace(/this./g,"").replace(/\$(.*)\((.*)\)\s*(=|;)/g,"$1 $2 $3");if("main"==t)n=n.replace(/function.*\(\s*([\s\S]*?)\s*{/,"){")+"\n";else{var i=n.match(/function.*\(\s*([\s\S]*?)\s*\)/)[1];""!=i&&(i=i.replace(/\$([\w|\d]+)_/g,"$1 ")),n=n.replace(/function.*\(\s*([\s\S]*?)\s*\)/,i+")")+"\n"}return n}function c(e){var t=e.match(/this\.(\w+)/g);return null!==t&&(t=t.map(function(e){return e.slice(5)})),t||[]}function s(e){var t=i.get(e);if(void 0===t)throw new Error('Resource/dependence "'+e+'" is not found.');return"subroutine"==t.resourceType?f(t.type,t.name,t.fn):t.header()}function l(e){var t={};return e.forEach(function(e,r){t[e]=r}),Object.keys(t)}return r.create=function(e,t){var a=e||{},o=a.name||"default",d=a.type||"vertex",h=a.require||a.deps||[],p=a.precision||"high",m=a.debug||!1,E=a.main||t||function(){},y="precision "+p+"p float;\n";0===h.length&&(h=l(function(e){var t=[],r=e.toString(),n=r.match(/function\s.*?\(([^)]*)\)/),i=null!==n&&n.length?n[1]:[];i.length&&(t=i.split(",").map(function(e){return e.replace(/\/\*.*\*\//,"").trim()}).filter(function(e){return e}));var a=c(r);return a.length&&(t=t.concat(a.filter(function(e){return-1===t.indexOf(e)}))),t}(E)));var b=[],g=[];if(h.forEach(function(e){var t=i.get(e);if(void 0===t)throw console.log(e),Error("Error! Undefined variable in shader: "+e.name);if("subroutine"==t.resourceType){g.push(t.name);var r=c(t.fn.toString());r.length&&(r.forEach(function(e){var t=i.get(e);"subroutine"==t.resourceType&&(b=b.concat(c(t.fn.toString())))}),b=b.concat(r))}}),b.length){var v=b.concat(h.filter(function(e){return-1===g.indexOf(e)})).concat(g);h=l(v)}Array.isArray(h)?h.forEach(function(e){y+=s(e)}):"object"==typeof h&&Object.keys(h).forEach(function(e){h[e].forEach(function(e){y+=s(e)})}),y+=f("void","main",E),m&&console.log(y);var T=function(e,t){if(e!==n.VERTEX_SHADER&&e!==n.FRAGMENT_SHADER)throw"Error: unknown shader type";var r=n.createShader(e);if(n.shaderSource(r,t),n.compileShader(r),!n.getShaderParameter(r,n.COMPILE_STATUS)){var i=n.getShaderInfoLog(r);throw console.log(t+"\n ===================================================="),new Error("Error compiling shader '"+r+"':"+i)}return r}(u[d],y);return T._shaderType=u[d],T.deps=h,T.source=y,r[d][o]=T,T},r}function u(e){var t=this instanceof u?this:{},r=e||{},n=r.container||null,f=r.canvas||document.createElement("canvas"),c=r.width||null,s=r.height||null,l=r.padding||{left:0,right:0,top:0,bottom:0},d=r.context||r.ctx||null,h=null;r.sharedFunction;"string"==typeof f&&(f="#"==f[0]?document.getElementById(cavnas.substring(1)):document.getElementById(cavnas)),n&&(n="string"==typeof n?document.getElementById(n):n,null===c&&(c=n.clientWidth),null===s&&(s=n.clientHeight)),f.width=c,f.height=s,f.style.position="absolute",f.style.marginLeft=l.left+"px",f.style.marginTop=l.top+"px",null===d&&(d=function(e){for(var t=["webgl","experimental-webgl"],r=null,n=0;n<t.length;++n){try{r=e.getContext(t[n])}catch(e){}if(r)break}return r}(f)),t.ctx=d,t.canvas=f,d._dict=r.env||r.dict||r.dictionary||{};var p=new a(d),m=new function e(t){var r=this instanceof e?this:{},n=t;return r.create=function(e,t,a,o){if(r[e]={ptr:n.createFramebuffer(),name:e,type:t||"float",width:a[0]||1024,height:a[1]||1024,texture:o||null,renderbuffer:n.createRenderbuffer()},null===r[e].texture){var u="float"==t?new Float32Array(a[0]*a[1]*4):new Uint8Array(a[0]*a[1]*4);r[e].texture=i(n).create(e,t,a,"rgba",u)}var f=r[e].renderbuffer;return n.bindFramebuffer(n.FRAMEBUFFER,r[e].ptr),n.bindRenderbuffer(n.RENDERBUFFER,f),n.renderbufferStorage(n.RENDERBUFFER,n.DEPTH_COMPONENT16,r[e].width,r[e].height),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,r[e].texture.ptr,0),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.DEPTH_ATTACHMENT,n.RENDERBUFFER,f),n.bindRenderbuffer(n.RENDERBUFFER,null),n.bindFramebuffer(n.FRAMEBUFFER,null),r[e].enableRead=function(e){n.activeTexture(n.TEXTURE0+this.texture.index),n.bindTexture(n.TEXTURE_2D,this.texture.ptr),this.texture.location=n.getUniformLocation(e,this.texture.name),n.uniform1i(this.texture.location,this.texture.index)},r[e].delete=function(){n.bindRenderbuffer(gl.RENDERBUFFER,null),n.bindFramebuffer(gl.FRAMEBUFFER,null),n.deleteRenderbuffer(this.renderbuffer),n.deleteTexture(this.texture.ptr),n.deleteFramebuffer(this.ptr)},r[e]},r}(d),E=new function(e,t){var r,n=e,i={},a={},u=new o(e,t);return i.create=function(e,t,r){e=e||"default",t=t||"default",r=r||"default";var o=[];if(a.hasOwnProperty(e)&&i.delete(e),a[e]=n.createProgram(),a[e].vs="object"==typeof t?t:u.vertex[t],a[e].fs="object"==typeof r?r:u.fragment[r],n.attachShader(a[e],a[e].vs),n.attachShader(a[e],a[e].fs),n.linkProgram(a[e]),!n.getProgramParameter(a[e],n.LINK_STATUS))throw"Error in program linking:"+n.getProgramInfoLog(a[e]);return o=(o=o.concat(a[e].vs.deps)).concat(a[e].fs.deps),a[e].deps=o,a[e]},i.use=i.program=function(e,o,u){return a.hasOwnProperty(e)?(r=a[e],n.useProgram(r),t.link(r,r.deps),r):i.create(e,o,u)},i.delete=function(e){a.hasOwnProperty(e)&&(n.detachShader(a[e],a[e].vs),n.detachShader(a[e],a[e].fs),n.deleteProgram(a[e]),delete a[e])},i.shader=function(e,t){var r=e;return u.create(r,t),i},i.shader.vertex=function(e){var t={type:"vertex"};return e.name&&(t.name=e.name),u.create(t,e)},i.shader.fragment=function(e){var t={type:"fragment"};return e.name&&(t.name=e.name),u.create(t,e)},i}(d,p),y=(new o(d,p),d.getExtension("EXT_blend_minmax"));function b(e){Array.isArray(e)||(e=[e]),e.forEach(function(e){var t=d.getExtension(e);null!==t&&Object.keys(t).forEach(function(e){ext.hasOwnProperty(e)||(d.ext[e]=t[e])})})}return y&&(d.MAX_EXT=y.MAX_EXT,d.MIN_EXT=y.MIN_EXT),d.ext=d.getExtension("ANGLE_instanced_arrays"),b(["OES_texture_float","OES_texture_float_linear"]),n&&n.appendChild(f),t.enableExtension=b,t.attribute=function(e,r,n){return p.allocate("attribute",e,r,n),Object.defineProperty(t.attribute,e,{get:function(){return p.attribute[e]},set:function(t){p.attribute[e].load(t)}}),t},t.buffer=t.attribute,t.uniform=function(e,r,n){return p.allocate("uniform",e,r,n),t.uniform.hasOwnProperty(e)||Object.defineProperty(t.uniform,e,{get:function(){return p.uniform[e]},set:function(t){p.uniform[e].load(t),d.isProgram(h)&&p.uniform[e].link(h)}}),t},t.uniform.serialize=function(e){var t=[];return e.forEach(function(e){t=t.concat(e)}),t},t.texture=function(e,r,n,i,a,o){return p.allocate("texture",e,r,i,a,n,o),Object.defineProperty(t.texture,e,{get:function(){return p.texture[e]},set:function(t){p.texture[e].load(t)}}),t},t.texture.update=function(e,t,r,n){p.texture[e].update(t,r,n)},t.varying=function(e,r,n){return p.allocate("varying",e,r,n),t},t.framebuffer=function(e,r,n,i){i=i||p.allocate("texture",e,r,n,"rgba",null);return m.create(e,r,n,i),t.framebuffer.hasOwnProperty(e)||Object.defineProperty(t.framebuffer,e,{get:function(){return m[e]}}),t},t.framebuffer.enableRead=function(e){m[e].enableRead(h)},t.bindFramebuffer=function(e){null===e?d.bindFramebuffer(d.FRAMEBUFFER,null):d.bindFramebuffer(d.FRAMEBUFFER,m[e].ptr)},t.subroutine=function(e,r,n){return p.allocate("subroutine",e,r,n),t},t.parameter=function(e){return Object.keys(e).forEach(function(t){if(d._dict[t]=e[t],Array.isArray(d._dict[t])){var r=0;Object.defineProperty(d._dict,t,{get:function(){return e[t][r++]},set:function(e){r=0,d._dict[t]=e}})}else if("object"==typeof d._dict[t]){var n=Object.keys(d._dict[t]);fxgl.uniform("dict"+t,"float",n.map(e=>d._dict[t][e]))}}),t},t.dictionary=t.parameter,t.shader=E.shader,t.program=function(e,t,r){return h=E.program(e,t,r),d},t.createProgram=function(e,t,r){return h=E.create(e,t,r),d},t.app=function(e,r){var n=t.shader.vertex(r.vs),i=t.shader.fragment(r.fs);r.framebuffer;t.program(e,n,i);var a=r.render||r.draw;return function(r){var n=t.program(e);return a.call(n,r)}},t.dimension=function(){return[f.width,f.height]},t.resources=p,t}r.r(t),"undefined"!=typeof window&&(window.FlexGL=u)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,