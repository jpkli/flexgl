!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";function n(e,t,r,i){var a=this instanceof n?this:{},u=e;function o(e){var t=[];return e.forEach(function(e){t=t.concat(e)}),t}return a.create=function(e,t,r){Array.isArray(r)&&(r.filter(function(e){return Array.isArray(e)})&&(r=o(r)));return a[e]={type:t,name:e,data:r,location:null,size:parseInt(t.slice(3,4))||parseInt(t.slice(4,5))||1},a[e].link=function(e){return void 0!==this.data&&null!==this.data&&(this.location=u.getUniformLocation(e,this.name),function(){var e,t=this.type,r=this.location,n=this.size,i=this.data;Array.isArray(i)&&i.filter(function(e){return Array.isArray(e)})&&(i=o(i)),"float"!=t&&"int"!=t||Array.isArray(i)||ArrayBuffer.isView(i)||(i=[i]),"vec"==t.slice(0,3)||"float"==t?(e=new Float32Array(i),u["uniform"+n+"fv"](r,e)):"ivec"==t.slice(0,4)||"int"==t?(e=new Int32Array(i),u["uniform"+n+"iv"](r,e)):"mat"==t.slice(0,3)?(e=new Float32Array(i),u["uniformMatrix"+n+"fv"](r,!1,e)):"sampler2D"==t&&i.hasOwnProperty("resourceType")&&"texture"==i.resourceType&&(u.activeTexture(u.TEXTURE0+i.index),u.bindTexture(u.TEXTURE_2D,i.ptr),u.uniform1i(r,i.index))}.call(this)),this},a[e].load=function(e){return this.data=e,this},a[e].header=function(){var e="uniform "+this.type+" "+this.name,r=0;return"sampler2D"!=this.type&&(r=this.data.length/this.size),r>1&&"mat4"!=t&&(e+="["+r+"]"),e+";\n"},a[e]},a}function i(e){var t=this instanceof i?this:{},r=e,a=0;function u(e,n){var i=r[t[e].type.toUpperCase()],a=r[t[e].channel.toUpperCase()],u=t[e].dim[0],o=t[e].dim[1];t[e].data=n,r.bindTexture(r.TEXTURE_2D,t[e].ptr),r.texImage2D(r.TEXTURE_2D,0,a,u,o,0,a,i,n),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),r.bindTexture(r.TEXTURE_2D,null)}return t.create=function(i,o,s,f,c,l){var d=t.hasOwnProperty(i)?t[i].index:a++;return t[i]={name:i,index:d,type:o||"float",dim:s||[512,512],channel:f||"alpha",data:null,location:null,sampler:l||null,ptr:r.createTexture()},u(i,c),null===t[i].sampler?t[i].sampler=n(r).create(i,"sampler2D",t[i]):t[i].sampler.data=t[i],t[i].link=function(e){return null!==this.data&&(void 0!==this.sampler.data&&null!==this.sampler.data||(this.sampler.data=t[i]),this.sampler.link(e)),this},t[i].load=function(e){return u(this.name,e),this},t[i].copyFromFBO=function(){r.bindTexture(r.TEXTURE_2D,this.ptr),r.copyTexImage2D(r.TEXTURE_2D,0,r.RGBA,0,0,this.dim[0],this.dim[1],0),r.bindTexture(r.TEXTURE_2D,null)},t[i].update=function(e,n,i){return function(e,n,i,a){var u=r[t[e].type.toUpperCase()],o=r[t[e].channel.toUpperCase()],s=a[0]||t[e].dim[0],f=a[1]||t[e].dim[1];r.bindTexture(r.TEXTURE_2D,t[e].ptr),r.texSubImage2D(r.TEXTURE_2D,0,i[0],i[1],s,f,o,u,n),r.bindTexture(r.TEXTURE_2D,null)}(this.name,e,n,i),this},t[i].resize=function(e,t){this.dim=e,u(this.name,t)},t[i].delete=function(){e.deleteTexture(this.ptr)},t[i].header=function(){return this.name==this.sampler.name?"uniform sampler2D "+this.sampler.name+";\n":""},t[i]},t}function a(e){var t=this instanceof a?this:{},r={};t.uniform=new n(e),t.attribute=new function e(t){var r=this instanceof e?this:{},n=t,i=0;function a(e,t){(Array.isArray(t)||ArrayBuffer.isView(t))&&(ArrayBuffer.isView(t)||(t=new Float32Array(t)),r[e].data=t,n.bindBuffer(n.ARRAY_BUFFER,r[e].ptr),n.bufferData(n.ARRAY_BUFFER,t,n.STATIC_DRAW))}return r.create=function(e,t,u){return r[e]={name:e,type:t||"float",data:null,location:i++,ptr:n.createBuffer(),size:parseInt(t.slice(3,4))||1},null!==u&&u.length&&a(e,u),r[e].link=function(e){return n.bindBuffer(n.ARRAY_BUFFER,this.ptr),this.location=n.getAttribLocation(e,this.name),n.vertexAttribPointer(this.location,this.size,n.FLOAT,!1,0,0),n.enableVertexAttribArray(this.location),this},r[e].load=function(e){return a(this.name,e),this},r[e].header=function(){return"attribute "+this.type+" "+this.name+";\n"},r[e].delete=function(){n.deleteBuffer(this.ptr)},r[e]},r}(e),t.texture=new i(e),t.varying=new function e(t){var r=this instanceof e?this:{};return r.create=function(e,t,n){return r[e]={name:e,type:t||"float",size:n||1},r[e].link=function(){},r[e].header=function(){var e="varying "+this.type+" "+this.name;return this.size>1&&(e+="["+this.size+"]"),e+";\n"},r[e]},r}(e),t.subroutine=new function e(){var t=this instanceof e?this:{};return t.create=function(e,r,n){return t[e]={name:e,type:r||"float",fn:n,resourceType:"subroutine"},t[e].link=function(e){return this},t[e].load=function(r){return t[e].fn=r,this},t[e].header=function(){return this.fn.toString()},t[e]},t};var u=["uniform","attribute","texture","varying","subroutine"];return t.allocate=function(e){if(-1===u.indexOf(e))throw Error("Error: Invalid resource type: "+e);var n=t[e].create.apply(null,Array.prototype.slice.call(arguments,1));return n.resourceType=e,r[n.name]=n,r.hasOwnProperty(n.name)||Object.defineProperty(r,n.name,{get:function(){return r[n.name]},set:function(e){r[n.name].load(e)}}),n},t.link=function(e,t){(Array.isArray(t)?t:Object.keys(r)).forEach(function(t){r.hasOwnProperty(t)&&r[t].link(e)})},t.get=function(e){return r[e]},t.create=t.allocate,t}function u(e){var t=this instanceof u?this:{},r=e||{},n=r.container||null,i=r.canvas||document.createElement("canvas"),o=r.width||null,s=r.height||null,f=r.padding||{left:0,right:0,top:0,bottom:0},c=r.context||r.ctx||null;r.sharedFunction;"string"==typeof i&&(i="#"==i[0]?document.getElementById(cavnas.substring(1)):document.getElementById(cavnas)),n&&(n="string"==typeof n?document.getElementById(n):n,null===o&&(o=n.clientWidth),null===s&&(s=n.clientHeight)),i.width=o,i.height=s,i.style.position="absolute",i.style.marginLeft=f.left+"px",i.style.marginTop=f.top+"px",null===c&&(c=function(e){for(var t=["webgl","experimental-webgl"],r=null,n=0;n<t.length;++n){try{r=e.getContext(t[n])}catch(e){}if(r)break}return r}(i)),t.ctx=c,t.canvas=i,t.resources=l,c._dict=r.env||r.dict||r.dictionary||{};var l=new a(c),d=new function e(t){var r=this instanceof e?this:{},n=t;return r.create=function(e,t,i,a){return r[e]={ptr:n.createFramebuffer(),name:e,type:t||"float",width:i[0]||1024,height:i[1]||1024,texture:a||null},n.bindFramebuffer(n.FRAMEBUFFER,r[e].ptr),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,r[e].texture.ptr,0),n.bindFramebuffer(n.FRAMEBUFFER,null),r[e].enableRead=function(e){this.texture.link(e)},r[e].delete=function(){n.bindRenderbuffer(gl.RENDERBUFFER,null),n.bindFramebuffer(gl.FRAMEBUFFER,null),n.deleteRenderbuffer(this.renderbuffer),n.deleteTexture(this.texture.ptr),n.deleteFramebuffer(this.ptr)},r[e]},r}(c),h=new function(e,t){var r={},n=e,i={};function a(e,t,r){var n=e.createShader(t);if(e.shaderSource(n,r),e.compileShader(n),e.getShaderParameter(n,e.COMPILE_STATUS))return n;console.log(e.getShaderInfoLog(n)),e.deleteShader(n)}return r.create=function(e,t,r){e=e||"default",t=t||"default",r=r||"default";var a=[];if(i.hasOwnProperty(e)&&this.delete(e),i[e]=n.createProgram(),i[e].vs=t,i[e].fs=r,n.attachShader(i[e],i[e].vs),n.attachShader(i[e],i[e].fs),n.linkProgram(i[e]),!n.getProgramParameter(i[e],n.LINK_STATUS))throw"Error in program linking:"+n.getProgramInfoLog(i[e]);a=(a=a.concat(i[e].vs.deps)).concat(i[e].fs.deps),i[e].deps=a},r.use=function(e,r,u){if(i.hasOwnProperty(e))return n.useProgram(i[e]),t.link(i[e],i[e].deps),i[e];var o=a(n,n.VERTEX_SHADER,r),s=a(n,n.FRAGMENT_SHADER,u);return o.deps=[],r.split(["\n"]).forEach(function(e){var t=e.split([" ",";"]);"attribute"!==t[0]&&"uniform"!==t[0]||o.deps.push(t[2])}),s.deps=[],u.split(["\n"]).forEach(function(e){var t=e.split([" ",";"]);"attribute"!==t[0]&&"uniform"!==t[0]||s.deps.push(t[2])}),this.create(e,o,s),n.useProgram(i[e]),t.link(i[e],i[e].deps),i[e]},r.delete=function(e){i.hasOwnProperty(e)&&(n.detachShader(i[e],i[e].vs),n.detachShader(i[e],i[e].fs),n.deleteProgram(i[e]),delete i[e])},r.shader=function(e,t){var n=e;return shaders.create(n,t),r},r.vertex=function(e){var t={type:"vertex"};return e.name&&(t.name=e.name),shaders.create(t,e)},r.fragment=function(e){var t={type:"fragment"};return e.name&&(t.name=e.name),shaders.create(t,e)},r}(c,l),p=null,m=c.getExtension("EXT_blend_minmax");function y(e){Array.isArray(e)||(e=[e]),e.forEach(function(e){var t=c.getExtension(e);null!==t&&Object.keys(t).forEach(function(e){ext.hasOwnProperty(e)||(c.ext[e]=t[e])})})}return m&&(c.MAX_EXT=m.MAX_EXT,c.MIN_EXT=m.MIN_EXT),c.ext=c.getExtension("ANGLE_instanced_arrays"),y(["OES_texture_float","OES_texture_float_linear"]),n&&n.appendChild(i),t.enableExtension=y,t.attribute=function(e,r,n){return l.allocate("attribute",e,r,n),t.attribute.hasOwnProperty(e)||Object.defineProperty(t.attribute,e,{get:()=>l.attribute[e],set(t){l.attribute[e].load(t)}}),t},t.uniform=function(e,r,n){return l.allocate("uniform",e,r,n),t.uniform.hasOwnProperty(e)||Object.defineProperty(t.uniform,e,{get:function(){return l.uniform[e]},set:function(t){l.uniform[e].load(t),c.isProgram(p)&&l.uniform[e].link(p)}}),t},t.uniform.serialize=function(e){var t=[];return e.forEach(function(e){t=t.concat(e)}),t},t.texture=function(e,r,n,i,a,u){return l.allocate("texture",e,r,i,a,n,u),Object.defineProperty(t.texture,e,{get:function(){return l.texture[e]},set:function(t){l.texture[e].load(t)}}),t},t.texture.update=function(e,t,r,n){l.texture[e].update(t,r,n)},t.varying=function(e,r,n){return l.allocate("varying",e,r,n),t},t.framebuffer=function(e,r,n,i){i=i||l.allocate("texture",e,r,n,"rgba",null);return d.create(e,r,n,i),t.framebuffer.hasOwnProperty(e)||Object.defineProperty(t.framebuffer,e,{get:function(){return d[e]}}),t},t.bindFramebuffer=function(e){null===e?c.bindFramebuffer(c.FRAMEBUFFER,null):c.bindFramebuffer(c.FRAMEBUFFER,d[e].ptr)},t.subroutine=function(e,r,n){return l.allocate("subroutine",e,r,n),t},t.parameter=function(e){return Object.keys(e).forEach(function(t){if(c._dict[t]=e[t],Array.isArray(c._dict[t])){var r=0;Object.defineProperty(c._dict,t,{get:function(){return e[t][r++]},set:function(e){r=0,c._dict[t]=e}})}else if("object"==typeof c._dict[t]){var n=Object.keys(c._dict[t]);fxgl.uniform("dict"+t,"float",n.map(e=>c._dict[t][e]))}}),t},t.dictionary=t.parameter,t.shader=h.shader,t.app=function(e,t,r){0===r?(c.viewport(0,0,1024,1),p=h.use(e,t.vsource,t.fsource),this.bindFramebuffer("f_sum_texture")):1===r?(c.viewport(0,0,c.canvas.width,c.canvas.height),p=h.use(e,t.vsource,t.fsource),this.bindFramebuffer(null)):2===r?(this.bindFramebuffer(null),c.viewport(0,0,1024,1),p=h.use(e,t.vsource,t.fsource),this.bindFramebuffer("f_mem_texture_1")):3===r?(this.bindFramebuffer(null),c.viewport(0,0,1024,1),p=h.use(e,t.vsource,t.fsource),this.bindFramebuffer("f_mem_texture_0")):4===r?(c.viewport(0,0,c.canvas.width,c.canvas.height),p=h.use(e,t.vsource,t.fsource),this.bindFramebuffer(null)):5===r&&(c.viewport(0,0,c.canvas.width,c.canvas.height),p=h.use(e,t.vsource,t.fsource),this.bindFramebuffer(null)),c.drawArrays(c.LINES,0,2)},t.dimension=function(){return[i.width,i.height]},t}r.r(t),"undefined"!=typeof window&&(window.FlexGL=u)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,