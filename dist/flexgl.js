!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";function n(e,t,r,i){var a=this instanceof n?this:{},u=e;function o(e){var t=[];return e.forEach(function(e){t=t.concat(e)}),t}return a.create=function(e,t,r){Array.isArray(r)&&(r.filter(function(e){return Array.isArray(e)})&&(r=o(r)));return a[e]={type:t,name:e,data:r,location:null,size:parseInt(t.slice(3,4))||parseInt(t.slice(4,5))||1},a[e].link=function(e){return void 0!==this.data&&null!==this.data&&(this.location=u.getUniformLocation(e,this.name),function(){var e,t=this.type,r=this.location,n=this.size,i=this.data;Array.isArray(i)&&i.filter(function(e){return Array.isArray(e)})&&(i=o(i)),"float"!=t&&"int"!=t||Array.isArray(i)||ArrayBuffer.isView(i)||(i=[i]),"vec"==t.slice(0,3)||"float"==t?(e=new Float32Array(i),u["uniform"+n+"fv"](r,e)):"ivec"==t.slice(0,4)||"int"==t?(e=new Int32Array(i),u["uniform"+n+"iv"](r,e)):"mat"==t.slice(0,3)?(e=new Float32Array(i),u["uniformMatrix"+n+"fv"](r,!1,e)):"sampler2D"==t&&i.hasOwnProperty("resourceType")&&"texture"==i.resourceType&&(u.activeTexture(u.TEXTURE0+i.index),u.bindTexture(u.TEXTURE_2D,i.ptr),u.uniform1i(r,i.index))}.call(this)),this},a[e].load=function(e){return this.data=e,this},a[e].header=function(){var e="uniform "+this.type+" "+this.name,r=0;return"sampler2D"!=this.type&&(r=this.data.length/this.size),r>1&&"mat4"!=t&&(e+="["+r+"]"),e+";\n"},a[e]},a}function i(e){var t=this instanceof i?this:{},r=e,a=0;function u(e,n){var i=r[t[e].type.toUpperCase()],a=r[t[e].channel.toUpperCase()],u=t[e].dim[0],o=t[e].dim[1];t[e].data=n,r.bindTexture(r.TEXTURE_2D,t[e].ptr),r.texImage2D(r.TEXTURE_2D,0,a,u,o,0,a,i,n),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),r.bindTexture(r.TEXTURE_2D,null)}return t.create=function(i,o,f,c,s,l){var h=t.hasOwnProperty(i)?t[i].index:a++;return t[i]={name:i,index:h,type:o||"float",dim:f||[512,512],channel:c||"alpha",data:null,location:null,sampler:l||null,ptr:r.createTexture()},u(i,s),null===t[i].sampler?t[i].sampler=n(r).create(i,"sampler2D",t[i]):t[i].sampler.data=t[i],t[i].link=function(e){return null!==this.data&&(void 0!==this.sampler.data&&null!==this.sampler.data||(this.sampler.data=t[i]),this.sampler.link(e)),this},t[i].load=function(e){return u(this.name,e),this},t[i].copyFromFBO=function(){r.bindTexture(r.TEXTURE_2D,this.ptr),r.copyTexImage2D(r.TEXTURE_2D,0,r.RGBA,0,0,this.dim[0],this.dim[1],0),r.bindTexture(r.TEXTURE_2D,null)},t[i].update=function(e,n,i){return function(e,n,i,a){var u=r[t[e].type.toUpperCase()],o=r[t[e].channel.toUpperCase()],f=a[0]||t[e].dim[0],c=a[1]||t[e].dim[1];r.bindTexture(r.TEXTURE_2D,t[e].ptr),r.texSubImage2D(r.TEXTURE_2D,0,i[0],i[1],f,c,o,u,n),r.bindTexture(r.TEXTURE_2D,null)}(this.name,e,n,i),this},t[i].resize=function(e,t){this.dim=e,u(this.name,t)},t[i].delete=function(){e.deleteTexture(this.ptr)},t[i].header=function(){return this.name==this.sampler.name?"uniform sampler2D "+this.sampler.name+";\n":""},t[i]},t}function a(e){var t=this instanceof a?this:{},r={};t.uniform=new n(e),t.attribute=new function e(t){var r=this instanceof e?this:{},n=t,i=0;function a(e,t){(Array.isArray(t)||ArrayBuffer.isView(t))&&(ArrayBuffer.isView(t)||(t=new Float32Array(t)),r[e].data=t,n.bindBuffer(n.ARRAY_BUFFER,r[e].ptr),n.bufferData(n.ARRAY_BUFFER,t,n.STATIC_DRAW))}return r.create=function(e,t,u){return r[e]={name:e,type:t||"float",data:null,location:i++,ptr:n.createBuffer(),size:parseInt(t.slice(3,4))||1},null!==u&&u.length&&a(e,u),r[e].link=function(e){return n.bindBuffer(n.ARRAY_BUFFER,this.ptr),this.location=n.getAttribLocation(e,this.name),n.vertexAttribPointer(this.location,this.size,n.FLOAT,!1,0,0),n.enableVertexAttribArray(this.location),this},r[e].load=function(e){return a(this.name,e),this},r[e].header=function(){return"attribute "+this.type+" "+this.name+";\n"},r[e].delete=function(){n.deleteBuffer(this.ptr)},r[e]},r}(e),t.texture=new i(e),t.varying=new function e(t){var r=this instanceof e?this:{};return r.create=function(e,t,n){return r[e]={name:e,type:t||"float",size:n||1},r[e].link=function(){},r[e].header=function(){var e="varying "+this.type+" "+this.name;return this.size>1&&(e+="["+this.size+"]"),e+";\n"},r[e]},r}(e),t.subroutine=new function e(){var t=this instanceof e?this:{};return t.create=function(e,r,n){return t[e]={name:e,type:r||"float",fn:n,resourceType:"subroutine"},t[e].link=function(e){return this},t[e].load=function(r){return t[e].fn=r,this},t[e].header=function(){return this.fn.toString()},t[e]},t};var u=["uniform","attribute","texture","varying","subroutine"];return t.allocate=function(e){if(-1===u.indexOf(e))throw Error("Error: Invalid resource type: "+e);var n=t[e].create.apply(null,Array.prototype.slice.call(arguments,1));return n.resourceType=e,r[n.name]=n,r.hasOwnProperty(n.name)||Object.defineProperty(r,n.name,{get:function(){return r[n.name]},set:function(e){r[n.name].load(e)}}),n},t.link=function(e,t){(Array.isArray(t)?t:Object.keys(r)).forEach(function(t){r.hasOwnProperty(t)&&r[t].link(e)})},t.get=function(e){return r[e]},t.create=t.allocate,t}function u(e,t){var r=this instanceof u?this:{},n=e,i=t,a=n._dict||{};r.vertex={},r.fragment={};var o={vertex:n.VERTEX_SHADER,fragment:n.FRAGMENT_SHADER};function f(e,t,r){var n=e+" "+t+"("+function(e){var t=Object.keys(a);if(t.length>0){var r=new RegExp("\\$\\(("+t.join("|")+")\\)","g");e=e.replace(r,function(e){return a[e.slice(2,e.length-1)]})}return e}(r.toString()).replace(/var\s+([\w|\d]+)\s*=\s*new\s+([\w|\d]+)\((.*)\)/g,function(e,t,r,n){return(n?[r.toLowerCase(),t,"=",n]:[r.toLowerCase(),t]).join(" ")}).replace(/for\s*\(\s*var\s+/g,"for(int ").replace(/var\s/g,"float ").replace(/this./g,"").replace(/\$(.*)\((.*)\)\s*(=|;)/g,"$1 $2 $3");if("main"==t)n=n.replace(/function.*\(\s*([\s\S]*?)\s*{/,"){")+"\n";else{var i=n.match(/function.*\(\s*([\s\S]*?)\s*\)/)[1];""!=i&&(i=i.replace(/\$([\w|\d]+)_/g,"$1 ")),n=n.replace(/function.*\(\s*([\s\S]*?)\s*\)/,i+")")+"\n"}return n}function c(e){var t=e.match(/this\.(\w+)/g);return null!==t&&(t=t.map(function(e){return e.slice(5)})),t||[]}function s(e){var t=i.get(e);if(void 0===t)throw new Error('Resource/dependence "'+e+'" is not found.');return"subroutine"==t.resourceType?f(t.type,t.name,t.fn):t.header()}function l(e){var t={};return e.forEach(function(e,r){t[e]=r}),Object.keys(t)}return r.create=function(e,t){var a=e||{},u=a.name||"default",h=a.type||"vertex",d=a.require||a.deps||[],m=a.precision||"high",p=a.debug||!1,b=a.main||t||function(){},E="precision "+m+"p float;\n";0===d.length&&(d=l(function(e){var t=[],r=e.toString(),n=r.match(/function\s.*?\(([^)]*)\)/),i=null!==n&&n.length?n[1]:[];i.length&&(t=i.split(",").map(function(e){return e.replace(/\/\*.*\*\//,"").trim()}).filter(function(e){return e}));var a=c(r);return a.length&&(t=t.concat(a.filter(function(e){return-1===t.indexOf(e)}))),t}(b)));var y=[],v=[];if(d.forEach(function(e){var t=i.get(e);if(void 0===t)throw console.log(e),Error("Error! Undefined variable in shader: "+e.name);if("subroutine"==t.resourceType){v.push(t.name);var r=c(t.fn.toString());r.length&&(r.forEach(function(e){var t=i.get(e);"subroutine"==t.resourceType&&(y=y.concat(c(t.fn.toString())))}),y=y.concat(r))}}),y.length){var g=y.concat(d.filter(function(e){return-1===v.indexOf(e)})).concat(v);d=l(g)}Array.isArray(d)?d.forEach(function(e){E+=s(e)}):"object"==typeof d&&Object.keys(d).forEach(function(e){d[e].forEach(function(e){E+=s(e)})}),E+=f("void","main",b),p&&console.log(E);var _=function(e,t){if(e!==n.VERTEX_SHADER&&e!==n.FRAGMENT_SHADER)throw"Error: unknown shader type";var r=n.createShader(e);if(n.shaderSource(r,t),n.compileShader(r),!n.getShaderParameter(r,n.COMPILE_STATUS)){var i=n.getShaderInfoLog(r);throw console.log(t+"\n ===================================================="),new Error("Error compiling shader '"+r+"':"+i)}return r}(o[h],E);return _._shaderType=o[h],_.deps=d,_.source=E,r[h][u]=_,_},r}function o(e){var t=this instanceof o?this:{},r=e||{},n=r.container||null,i=r.canvas||document.createElement("canvas"),f=r.width||null,c=r.height||null,s=r.padding||{left:0,right:0,top:0,bottom:0},l=r.context||r.ctx||null;r.sharedFunction;"string"==typeof i&&(i="#"==i[0]?document.getElementById(cavnas.substring(1)):document.getElementById(cavnas)),n&&(n="string"==typeof n?document.getElementById(n):n,null===f&&(f=n.clientWidth),null===c&&(c=n.clientHeight)),i.width=f,i.height=c,i.style.position="absolute",i.style.marginLeft=s.left+"px",i.style.marginTop=s.top+"px",null===l&&(l=function(e){for(var t=["webgl","experimental-webgl"],r=null,n=0;n<t.length;++n){try{r=e.getContext(t[n])}catch(e){}if(r)break}return r}(i)),t.ctx=l,t.canvas=i,t.resources=h,l._dict=r.env||r.dict||r.dictionary||{};var h=new a(l),d=new function e(t){var r=this instanceof e?this:{},n=t;return r.create=function(e,t,i,a){return r[e]={ptr:n.createFramebuffer(),name:e,type:t||"float",width:i[0]||1024,height:i[1]||1024,texture:a||null},n.bindFramebuffer(n.FRAMEBUFFER,r[e].ptr),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,r[e].texture.ptr,0),n.bindFramebuffer(n.FRAMEBUFFER,null),r[e].enableRead=function(e){n.activeTexture(n.TEXTURE0+this.texture.index),n.bindTexture(n.TEXTURE_2D,this.texture.ptr),this.texture.location=n.getUniformLocation(e,this.texture.name),n.uniform1i(this.texture.location,this.texture.index)},r[e].delete=function(){n.bindRenderbuffer(gl.RENDERBUFFER,null),n.bindFramebuffer(gl.FRAMEBUFFER,null),n.deleteRenderbuffer(this.renderbuffer),n.deleteTexture(this.texture.ptr),n.deleteFramebuffer(this.ptr)},r[e]},r}(l),m=new function(e,t){var r={},n=e,i={},a=new u(e,t);function o(e,t,r){var n=e.createShader(t);if(e.shaderSource(n,r),e.compileShader(n),e.getShaderParameter(n,e.COMPILE_STATUS))return n;console.log(e.getShaderInfoLog(n)),e.deleteShader(n)}return r.create=function(e,t,r){e=e||"default",t=t||"default",r=r||"default";var u=[];if(i.hasOwnProperty(e)&&this.delete(e),i[e]=n.createProgram(),i[e].vs="object"==typeof t?t:a.vertex[t],i[e].fs="object"==typeof r?r:a.fragment[r],n.attachShader(i[e],i[e].vs),n.attachShader(i[e],i[e].fs),n.linkProgram(i[e]),!n.getProgramParameter(i[e],n.LINK_STATUS))throw"Error in program linking:"+n.getProgramInfoLog(i[e]);u=(u=u.concat(i[e].vs.deps)).concat(i[e].fs.deps),i[e].deps=u},r.use=function(e,r,a){if(i.hasOwnProperty(e))return n.useProgram(i[e]),t.link(i[e],i[e].deps),i[e];var u=o(n,n.VERTEX_SHADER,r),f=o(n,n.FRAGMENT_SHADER,a);return this.create(e,u,f),n.useProgram(i[e]),t.link(i[e],i[e].deps),i[e]},r.delete=function(e){i.hasOwnProperty(e)&&(n.detachShader(i[e],i[e].vs),n.detachShader(i[e],i[e].fs),n.deleteProgram(i[e]),delete i[e])},r.shader=function(e,t){var n=e;return a.create(n,t),r},r.vertex=function(e){var t={type:"vertex"};return e.name&&(t.name=e.name),a.create(t,e)},r.fragment=function(e){var t={type:"fragment"};return e.name&&(t.name=e.name),a.create(t,e)},r}(l,h),p=null,b=l.getExtension("EXT_blend_minmax");function E(e){Array.isArray(e)||(e=[e]),e.forEach(function(e){var t=l.getExtension(e);null!==t&&Object.keys(t).forEach(function(e){ext.hasOwnProperty(e)||(l.ext[e]=t[e])})})}return b&&(l.MAX_EXT=b.MAX_EXT,l.MIN_EXT=b.MIN_EXT),l.ext=l.getExtension("ANGLE_instanced_arrays"),E(["OES_texture_float","OES_texture_float_linear"]),n&&n.appendChild(i),t.enableExtension=E,t.attribute=function(e,r,n){return h.allocate("attribute",e,r,n),t.attribute.hasOwnProperty(e)||Object.defineProperty(t.attribute,e,{get:()=>h.attribute[e],set(t){h.attribute[e].load(t)}}),t},t.uniform=function(e,r,n){return h.allocate("uniform",e,r,n),t.uniform.hasOwnProperty(e)||Object.defineProperty(t.uniform,e,{get:function(){return h.uniform[e]},set:function(t){h.uniform[e].load(t),l.isProgram(p)&&h.uniform[e].link(p)}}),t},t.uniform.serialize=function(e){var t=[];return e.forEach(function(e){t=t.concat(e)}),t},t.texture=function(e,r,n,i,a,u){return h.allocate("texture",e,r,i,a,n,u),Object.defineProperty(t.texture,e,{get:function(){return h.texture[e]},set:function(t){h.texture[e].load(t)}}),t},t.texture.update=function(e,t,r,n){h.texture[e].update(t,r,n)},t.varying=function(e,r,n){return h.allocate("varying",e,r,n),t},t.framebuffer=function(e,r,n,i){i=i||h.allocate("texture",e,r,n,"rgba",null);return d.create(e,r,n,i),t.framebuffer.hasOwnProperty(e)||Object.defineProperty(t.framebuffer,e,{get:function(){return d[e]}}),t},t.framebuffer.enableRead=function(e,t){d[e].enableRead(t)},t.bindFramebuffer=function(e){null===e?l.bindFramebuffer(l.FRAMEBUFFER,null):l.bindFramebuffer(l.FRAMEBUFFER,d[e].ptr)},t.subroutine=function(e,r,n){return h.allocate("subroutine",e,r,n),t},t.parameter=function(e){return Object.keys(e).forEach(function(t){if(l._dict[t]=e[t],Array.isArray(l._dict[t])){var r=0;Object.defineProperty(l._dict,t,{get:function(){return e[t][r++]},set:function(e){r=0,l._dict[t]=e}})}else if("object"==typeof l._dict[t]){var n=Object.keys(l._dict[t]);fxgl.uniform("dict"+t,"float",n.map(e=>l._dict[t][e]))}}),t},t.dictionary=t.parameter,t.shader=m.shader,t.app=function(e,t,r){0===r?(l.viewport(0,0,1024,1),p=m.use(e,t.vsource,t.fsource),this.attribute.a_position.link(p),this.attribute.a_texcoord.link(p),this.texture.u_texture.link(p),this.bindFramebuffer("f_sum_texture")):1===r?(l.viewport(0,0,l.canvas.width,l.canvas.height),p=m.use(e,t.vsource,t.fsource),this.attribute.a_position.link(p),this.attribute.a_texcoord.link(p),this.bindFramebuffer(null),this.framebuffer.enableRead("f_sum_texture",p)):2===r?(this.bindFramebuffer(null),l.viewport(0,0,1024,1),p=m.use(e,t.vsource,t.fsource),this.attribute.a_position.link(p),this.attribute.a_texcoord.link(p),this.bindFramebuffer("f_mem_texture_1"),this.framebuffer.enableRead("f_mem_texture_0",p),this.framebuffer.enableRead("f_sum_texture",p)):3===r?(this.bindFramebuffer(null),l.viewport(0,0,1024,1),p=m.use(e,t.vsource,t.fsource),this.attribute.a_position.link(p),this.attribute.a_texcoord.link(p),this.bindFramebuffer("f_mem_texture_0"),this.framebuffer.enableRead("f_mem_texture_1",p),this.framebuffer.enableRead("f_sum_texture",p)):4===r?(l.viewport(0,0,l.canvas.width,l.canvas.height),p=m.use(e,t.vsource,t.fsource),this.attribute.a_position.link(p),this.attribute.a_texcoord.link(p),this.bindFramebuffer(null),this.framebuffer.enableRead("f_mem_texture_1",p)):5===r&&(l.viewport(0,0,l.canvas.width,l.canvas.height),p=m.use(e,t.vsource,t.fsource),this.attribute.a_position.link(p),this.attribute.a_texcoord.link(p),this.bindFramebuffer(null),this.framebuffer.enableRead("f_mem_texture_0",p)),l.drawArrays(l.LINES,0,2)},t.dimension=function(){return[i.width,i.height]},t}r.r(t),"undefined"!=typeof window&&(window.FlexGL=o)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,