!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";function n(e,t,r,i){var a=this instanceof n?this:{},u=e;function o(e){var t=[];return e.forEach(function(e){t=t.concat(e)}),t}return a.create=function(e,t,r){return Array.isArray(r)&&r.filter(function(e){return Array.isArray(e)})&&(r=o(r)),a[e]={type:t,name:e,data:r,location:null,size:parseInt(t.slice(3,4))||parseInt(t.slice(4,5))||1},a[e].link=function(e){return void 0!==this.data&&null!==this.data&&(this.location=u.getUniformLocation(e,this.name),function(){var e,t=this.type,r=this.location,n=this.size,i=this.data;Array.isArray(i)&&i.filter(function(e){return Array.isArray(e)})&&(i=o(i)),"float"!=t&&"int"!=t||Array.isArray(i)||ArrayBuffer.isView(i)||(i=[i]),"vec"==t.slice(0,3)||"float"==t?(e=new Float32Array(i),u["uniform"+n+"fv"](r,e)):"ivec"==t.slice(0,4)||"int"==t?(e=new Int32Array(i),u["uniform"+n+"iv"](r,e)):"mat"==t.slice(0,3)?(e=new Float32Array(i),u["uniformMatrix"+n+"fv"](r,!1,e)):"sampler2D"==t&&i.hasOwnProperty("resourceType")&&"texture"==i.resourceType&&(u.activeTexture(u.TEXTURE0+i.index),u.bindTexture(u.TEXTURE_2D,i.ptr),u.uniform1i(r,i.index))}.call(this)),this},a[e].load=function(e){return this.data=e,this},a[e].header=function(){var e="uniform "+this.type+" "+this.name,r=0;return"sampler2D"!=this.type&&(r=this.data.length/this.size),r>1&&"mat4"!=t&&(e+="["+r+"]"),e+";\n"},a[e]},a}function i(e){var t=this instanceof i?this:{},r=e,a=0;function u(e,n){var i=r[t[e].type.toUpperCase()],a=r[t[e].channel.toUpperCase()],u=t[e].dim[0],o=t[e].dim[1];t[e].data=n,r.bindTexture(r.TEXTURE_2D,t[e].ptr),r.texImage2D(r.TEXTURE_2D,0,a,u,o,0,a,i,n),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),r.bindTexture(r.TEXTURE_2D,null)}return t.create=function(i,o,f,c,l,s){var d=t.hasOwnProperty(i)?t[i].index:a++;return t[i]={name:i,index:d,type:o||"float",dim:f||[512,512],channel:c||"alpha",data:null,location:null,sampler:s||null,ptr:r.createTexture()},u(i,l),null===t[i].sampler?t[i].sampler=n(r).create(i,"sampler2D",t[i]):t[i].sampler.data=t[i],t[i].link=function(e){return null!==this.data&&(void 0!==this.sampler.data&&null!==this.sampler.data||(this.sampler.data=t[i]),this.sampler.link(e)),this},t[i].load=function(e){return u(this.name,e),this},t[i].copyFromFBO=function(){r.bindTexture(r.TEXTURE_2D,this.ptr),r.copyTexImage2D(r.TEXTURE_2D,0,r.RGBA,0,0,this.dim[0],this.dim[1],0),r.bindTexture(r.TEXTURE_2D,null)},t[i].update=function(e,n,i){return function(e,n,i,a){var u=r[t[e].type.toUpperCase()],o=r[t[e].channel.toUpperCase()],f=a[0]||t[e].dim[0],c=a[1]||t[e].dim[1];r.bindTexture(r.TEXTURE_2D,t[e].ptr),r.texSubImage2D(r.TEXTURE_2D,0,i[0],i[1],f,c,o,u,n),r.bindTexture(r.TEXTURE_2D,null)}(this.name,e,n,i),this},t[i].resize=function(e,t){this.dim=e,u(this.name,t)},t[i].delete=function(){e.deleteTexture(this.ptr)},t[i].header=function(){return this.name==this.sampler.name?"uniform sampler2D "+this.sampler.name+";\n":""},t[i]},t}function a(e){var t=this instanceof a?this:{},r={};t.uniform=new n(e),t.attribute=new function e(t){var r=this instanceof e?this:{},n=t,i=0;function a(e,t){(Array.isArray(t)||ArrayBuffer.isView(t))&&(ArrayBuffer.isView(t)||(t=new Float32Array(t)),r[e].data=t,n.bindBuffer(n.ARRAY_BUFFER,r[e].ptr),n.bufferData(n.ARRAY_BUFFER,t,n.STATIC_DRAW))}return r.create=function(e,t,u){return r[e]={name:e,type:t||"float",data:null,location:i++,ptr:n.createBuffer(),size:parseInt(t.slice(3,4))||1},null!==u&&u.length&&a(e,u),r[e].link=function(e){return n.bindBuffer(n.ARRAY_BUFFER,this.ptr),this.location=n.getAttribLocation(e,this.name),n.vertexAttribPointer(this.location,this.size,n.FLOAT,!1,0,0),n.enableVertexAttribArray(this.location),this},r[e].load=function(e){return a(this.name,e),this},r[e].header=function(){return"attribute "+this.type+" "+this.name+";\n"},r[e].delete=function(){n.deleteBuffer(this.ptr)},r[e]},r}(e),t.texture=new i(e),t.varying=new function e(t){var r=this instanceof e?this:{};return r.create=function(e,t,n){return r[e]={name:e,type:t||"float",size:n||1},r[e].link=function(){},r[e].header=function(){var e="varying "+this.type+" "+this.name;return this.size>1&&(e+="["+this.size+"]"),e+";\n"},r[e]},r}(e),t.subroutine=new function e(){var t=this instanceof e?this:{};return t.create=function(e,r,n){return t[e]={name:e,type:r||"float",fn:n,resourceType:"subroutine"},t[e].link=function(e){return this},t[e].load=function(r){return t[e].fn=r,this},t[e].header=function(){return this.fn.toString()},t[e]},t};var u=["uniform","attribute","texture","varying","subroutine"];return t.allocate=function(e){if(-1===u.indexOf(e))throw Error("Error: Invalid resource type: "+e);var n=t[e].create.apply(null,Array.prototype.slice.call(arguments,1));return n.resourceType=e,r[n.name]=n,r.hasOwnProperty(n.name)||Object.defineProperty(r,n.name,{get:function(){return r[n.name]},set:function(e){r[n.name].load(e)}}),n},t.link=function(e,t){(Array.isArray(t)?t:Object.keys(r)).forEach(function(t){r.hasOwnProperty(t)&&r[t].link(e)})},t.get=function(e){return r[e]},t.create=t.allocate,t}function u(e,t){var r=this instanceof u?this:{},n=e;n._dict,r.vertex={},r.fragment={};var i={vertex:n.VERTEX_SHADER,fragment:n.FRAGMENT_SHADER};return r.create=function(e,t){var a=e||{},u=a.name||"default",o=a.type||"vertex",f=t,c=function(e,t){if(e!==n.VERTEX_SHADER&&e!==n.FRAGMENT_SHADER)throw"Error: unknown shader type";var r=n.createShader(e);if(n.shaderSource(r,t),n.compileShader(r),!n.getShaderParameter(r,n.COMPILE_STATUS)){var i=n.getShaderInfoLog(r);throw console.log(t+"\n ===================================================="),new Error("Error compiling shader '"+r+"':"+i)}return r}(i[o],f);return c._shaderType=i[o],c.source=f,r[o][u]=c,c},r}r.r(t),"undefined"!=typeof window&&(window.FlexGL=function e(t){var r=this instanceof e?this:{},n=t||{},o=n.container||null,f=n.canvas||document.createElement("canvas"),c=n.width||null,l=n.height||null,s=n.padding||{left:0,right:0,top:0,bottom:0},d=n.context||n.ctx||null,h=null;n.sharedFunction,"string"==typeof f&&(f="#"==f[0]?document.getElementById(cavnas.substring(1)):document.getElementById(cavnas)),o&&(o="string"==typeof o?document.getElementById(o):o,null===c&&(c=o.clientWidth),null===l&&(l=o.clientHeight)),f.width=c,f.height=l,f.style.position="absolute",f.style.marginLeft=s.left+"px",f.style.marginTop=s.top+"px",null===d&&(d=function(e){for(var t=["webgl","experimental-webgl"],r=null,n=0;n<t.length;++n){try{r=e.getContext(t[n])}catch(e){}if(r)break}return r}(f)),r.ctx=d,r.canvas=f,d._dict=n.env||n.dict||n.dictionary||{};var m=new a(d),p=new function e(t){var r=this instanceof e?this:{},n=t;return r.create=function(e,t,a,u){if(r[e]={ptr:n.createFramebuffer(),name:e,type:t||"float",width:a[0]||1024,height:a[1]||1024,texture:u||null,renderbuffer:n.createRenderbuffer()},null===r[e].texture){var o="float"==t?new Float32Array(a[0]*a[1]*4):new Uint8Array(a[0]*a[1]*4);r[e].texture=i(n).create(e,t,a,"rgba",o)}var f=r[e].renderbuffer;return n.bindFramebuffer(n.FRAMEBUFFER,r[e].ptr),n.bindRenderbuffer(n.RENDERBUFFER,f),n.renderbufferStorage(n.RENDERBUFFER,n.DEPTH_COMPONENT16,r[e].width,r[e].height),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,r[e].texture.ptr,0),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.DEPTH_ATTACHMENT,n.RENDERBUFFER,f),n.bindRenderbuffer(n.RENDERBUFFER,null),n.bindFramebuffer(n.FRAMEBUFFER,null),r[e].enableRead=function(e){n.activeTexture(n.TEXTURE0+this.texture.index),n.bindTexture(n.TEXTURE_2D,this.texture.ptr),this.texture.location=n.getUniformLocation(e,this.texture.name),n.uniform1i(this.texture.location,this.texture.index)},r[e].delete=function(){n.bindRenderbuffer(gl.RENDERBUFFER,null),n.bindFramebuffer(gl.FRAMEBUFFER,null),n.deleteRenderbuffer(this.renderbuffer),n.deleteTexture(this.texture.ptr),n.deleteFramebuffer(this.ptr)},r[e]},r}(d),E=new function(e,t){var r={},n=d,i={},a=new u(d,t);return r.create=function(e,t,u){e=e||"default",t=t||"default",u=u||"default";var o=[];if(i.hasOwnProperty(e)&&r.delete(e),i[e]=n.createProgram(),i[e].vs="object"==typeof t?t:a.vertex[t],i[e].fs="object"==typeof u?u:a.fragment[u],n.attachShader(i[e],i[e].vs),n.attachShader(i[e],i[e].fs),n.linkProgram(i[e]),!n.getProgramParameter(i[e],n.LINK_STATUS))throw"Error in program linking:"+n.getProgramInfoLog(i[e]);return o=(o=o.concat(i[e].vs.deps)).concat(i[e].fs.deps),i[e].deps=o,i[e]},r.use=function(e,a,u){return i.hasOwnProperty(e)?(r=i[e],n.useProgram(r),t.link(r,r.deps),r):r.create(e,a,u)},r.delete=function(e){i.hasOwnProperty(e)&&(n.detachShader(i[e],i[e].vs),n.detachShader(i[e],i[e].fs),n.deleteProgram(i[e]),delete i[e])},r.shader=function(e,t){var n=e;return a.create(n,t),r},r.vertex=function(e){return a.create({type:"vertex"},e)},r.fragment=function(e){return a.create({type:"fragment"},e)},r}(d,m),y=(new u(d,m),d.getExtension("EXT_blend_minmax"));function b(e){Array.isArray(e)||(e=[e]),e.forEach(function(e){var t=d.getExtension(e);null!==t&&Object.keys(t).forEach(function(e){ext.hasOwnProperty(e)||(d.ext[e]=t[e])})})}return y&&(d.MAX_EXT=y.MAX_EXT,d.MIN_EXT=y.MIN_EXT),d.ext=d.getExtension("ANGLE_instanced_arrays"),b(["OES_texture_float","OES_texture_float_linear"]),o&&o.appendChild(f),r.enableExtension=b,r.attribute=function(e,t,n){return m.allocate("attribute",e,t,n),Object.defineProperty(r.attribute,e,{get:()=>m.attribute[e],set(t){m.attribute[e].load(t)}}),r},r.buffer=r.attribute,r.uniform=function(e,t,n){return m.allocate("uniform",e,t,n),r.uniform.hasOwnProperty(e)||Object.defineProperty(r.uniform,e,{get:function(){return m.uniform[e]},set:function(t){m.uniform[e].load(t),d.isProgram(h)&&m.uniform[e].link(h)}}),r},r.uniform.serialize=function(e){var t=[];return e.forEach(function(e){t=t.concat(e)}),t},r.texture=function(e,t,n,i,a,u){return m.allocate("texture",e,t,i,a,n,u),Object.defineProperty(r.texture,e,{get:function(){return m.texture[e]},set:function(t){m.texture[e].load(t)}}),r},r.texture.update=function(e,t,r,n){m.texture[e].update(t,r,n)},r.varying=function(e,t,n){return m.allocate("varying",e,t,n),r},r.framebuffer=function(e,t,n,i){return i=i||m.allocate("texture",e,t,n,"rgba",null),p.create(e,t,n,i),r.framebuffer.hasOwnProperty(e)||Object.defineProperty(r.framebuffer,e,{get:function(){return p[e]}}),r},r.framebuffer.enableRead=function(e){p[e].enableRead(h)},r.bindFramebuffer=function(e){null===e?d.bindFramebuffer(d.FRAMEBUFFER,null):d.bindFramebuffer(d.FRAMEBUFFER,p[e].ptr)},r.subroutine=function(e,t,n){return m.allocate("subroutine",e,t,n),r},r.parameter=function(e){return Object.keys(e).forEach(function(t){if(d._dict[t]=e[t],Array.isArray(d._dict[t])){var r=0;Object.defineProperty(d._dict,t,{get:function(){return e[t][r++]},set:function(e){r=0,d._dict[t]=e}})}else if("object"==typeof d._dict[t]){var n=Object.keys(d._dict[t]);fxgl.uniform("dict"+t,"float",n.map(e=>d._dict[t][e]))}}),r},r.dictionary=r.parameter,r.shader=E.shader,r.program=function(e,t,r){return h=E.use(e,t,r),d},r.createProgram=function(e,t,r){return h=E.create(e,t,r),d},r.app=function(e,t){var n=E.vertex(t.vs),i=E.fragment(t.fs);t.framebuffer,r.program(e,n,i);var a=t.render||t.draw;return function(t){var n=r.program(e);return a.call(n,t)}},r.dimension=function(){return[f.width,f.height]},r.resources=m,r})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,