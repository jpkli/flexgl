!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";function n(e,t,r,i){var a=this instanceof n?this:{},u=e;function o(e){var t=[];return e.forEach(function(e){t=t.concat(e)}),t}return a.create=function(e,t,r){return Array.isArray(r)&&r.filter(function(e){return Array.isArray(e)})&&(r=o(r)),a[e]={type:t,name:e,data:r,location:null,size:parseInt(t.slice(3,4))||parseInt(t.slice(4,5))||1},a[e].link=function(e){return void 0!==this.data&&null!==this.data&&(this.location=u.getUniformLocation(e,this.name),function(){var e,t=this.type,r=this.location,n=this.size,i=this.data;Array.isArray(i)&&i.filter(function(e){return Array.isArray(e)})&&(i=o(i)),"float"!=t&&"int"!=t||Array.isArray(i)||ArrayBuffer.isView(i)||(i=[i]),"vec"==t.slice(0,3)||"float"==t?(e=new Float32Array(i),u["uniform"+n+"fv"](r,e)):"ivec"==t.slice(0,4)||"int"==t?(e=new Int32Array(i),u["uniform"+n+"iv"](r,e)):"mat"==t.slice(0,3)?(e=new Float32Array(i),u["uniformMatrix"+n+"fv"](r,!1,e)):"sampler2D"==t&&i.hasOwnProperty("resourceType")&&"texture"==i.resourceType&&(u.activeTexture(u.TEXTURE0+i.index),u.bindTexture(u.TEXTURE_2D,i.ptr),u.uniform1i(r,i.index))}.call(this)),this},a[e].load=function(e){return this.data=e,this},a[e].header=function(){var e="uniform "+this.type+" "+this.name,r=0;return"sampler2D"!=this.type&&(r=this.data.length/this.size),r>1&&"mat4"!=t&&(e+="["+r+"]"),e+";\n"},a[e]},a}function i(e){var t=this instanceof i?this:{},r={};t.uniform=new n(e),t.attribute=new function e(t){var r=this instanceof e?this:{},n=t,i=0;function a(e,t){(Array.isArray(t)||ArrayBuffer.isView(t))&&(ArrayBuffer.isView(t)||(t=new Float32Array(t)),r[e].data=t,n.bindBuffer(n.ARRAY_BUFFER,r[e].ptr),n.bufferData(n.ARRAY_BUFFER,t,n.STATIC_DRAW))}return r.create=function(e,t,u){return r[e]={name:e,type:t||"float",data:null,location:i++,ptr:n.createBuffer(),size:parseInt(t.slice(3,4))||1},null!==u&&u.length&&a(e,u),r[e].link=function(e){return n.bindBuffer(n.ARRAY_BUFFER,this.ptr),this.location=n.getAttribLocation(e,this.name),n.vertexAttribPointer(this.location,this.size,n.FLOAT,!1,0,0),n.enableVertexAttribArray(this.location),this},r[e].load=function(e){return a(this.name,e),this},r[e].header=function(){return"attribute "+this.type+" "+this.name+";\n"},r[e].delete=function(){n.deleteBuffer(this.ptr)},r[e]},r}(e),t.texture=new function e(t){var r=this instanceof e?this:{},i=t,a=0;function u(e,t){var n=i[r[e].type.toUpperCase()],a=i[r[e].channel.toUpperCase()],u=r[e].dim[0],o=r[e].dim[1];r[e].data=t,i.bindTexture(i.TEXTURE_2D,r[e].ptr),i.texImage2D(i.TEXTURE_2D,0,a,u,o,0,a,n,t),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MIN_FILTER,i.NEAREST),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MAG_FILTER,i.NEAREST),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_S,i.CLAMP_TO_EDGE),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_T,i.CLAMP_TO_EDGE),i.bindTexture(i.TEXTURE_2D,null)}return r.create=function(e,o,s,f,c,l){var d=r.hasOwnProperty(e)?r[e].index:a++;return r[e]={name:e,index:d,type:o||"float",dim:s||[512,512],channel:f||"alpha",data:null,location:null,sampler:l||null,ptr:i.createTexture()},u(e,c),null===r[e].sampler?r[e].sampler=n(i).create(e,"sampler2D",r[e]):r[e].sampler.data=r[e],r[e].link=function(t){return null!==this.data&&(void 0!==this.sampler.data&&null!==this.sampler.data||(this.sampler.data=r[e]),this.sampler.link(t)),this},r[e].load=function(e){return u(this.name,e),this},r[e].copyFromFBO=function(){i.bindTexture(i.TEXTURE_2D,this.ptr),i.copyTexImage2D(i.TEXTURE_2D,0,i.RGBA,0,0,this.dim[0],this.dim[1],0),i.bindTexture(i.TEXTURE_2D,null)},r[e].update=function(e,t,n){return function(e,t,n,a){var u=i[r[e].type.toUpperCase()],o=i[r[e].channel.toUpperCase()],s=a[0]||r[e].dim[0],f=a[1]||r[e].dim[1];i.bindTexture(i.TEXTURE_2D,r[e].ptr),i.texSubImage2D(i.TEXTURE_2D,0,n[0],n[1],s,f,o,u,t),i.bindTexture(i.TEXTURE_2D,null)}(this.name,e,t,n),this},r[e].resize=function(e,t){this.dim=e,u(this.name,t)},r[e].delete=function(){t.deleteTexture(this.ptr)},r[e].header=function(){return this.name==this.sampler.name?"uniform sampler2D "+this.sampler.name+";\n":""},r[e]},r}(e),t.varying=new function e(t){var r=this instanceof e?this:{};return r.create=function(e,t,n){return r[e]={name:e,type:t||"float",size:n||1},r[e].link=function(){},r[e].header=function(){var e="varying "+this.type+" "+this.name;return this.size>1&&(e+="["+this.size+"]"),e+";\n"},r[e]},r}(e),t.subroutine=new function e(){var t=this instanceof e?this:{};return t.create=function(e,r,n){return t[e]={name:e,type:r||"float",fn:n,resourceType:"subroutine"},t[e].link=function(e){return this},t[e].load=function(r){return t[e].fn=r,this},t[e].header=function(){return this.fn.toString()},t[e]},t};var a=["uniform","attribute","texture","varying","subroutine"];return t.allocate=function(e){if(-1===a.indexOf(e))throw Error("Error: Invalid resource type: "+e);var n=t[e].create.apply(null,Array.prototype.slice.call(arguments,1));return n.resourceType=e,r[n.name]=n,r.hasOwnProperty(n.name)||Object.defineProperty(r,n.name,{get:function(){return r[n.name]},set:function(e){r[n.name].load(e)}}),n},t.link=function(e,t){(Array.isArray(t)?t:Object.keys(r)).forEach(function(t){r.hasOwnProperty(t)&&r[t].link(e)})},t.get=function(e){return r[e]},t.create=t.allocate,t}r.r(t),"undefined"!=typeof window&&(window.FlexGL=function e(t){var r=this instanceof e?this:{},n=t||{},a=n.container||null,u=n.canvas||document.createElement("canvas"),o=n.width||null,s=n.height||null,f=n.padding||{left:0,right:0,top:0,bottom:0},c=n.context||n.ctx||null;n.sharedFunction,"string"==typeof u&&(u="#"==u[0]?document.getElementById(cavnas.substring(1)):document.getElementById(cavnas)),a&&(a="string"==typeof a?document.getElementById(a):a,null===o&&(o=a.clientWidth),null===s&&(s=a.clientHeight)),u.width=o,u.height=s,u.style.position="absolute",u.style.marginLeft=f.left+"px",u.style.marginTop=f.top+"px",null===c&&(c=function(e){for(var t=["webgl","experimental-webgl"],r=null,n=0;n<t.length;++n){try{r=e.getContext(t[n])}catch(e){}if(r)break}return r}(u)),r.ctx=c,r.canvas=u,r.resources=l,c._dict=n.env||n.dict||n.dictionary||{};var l=new i(c),d=new function e(t){var r=this instanceof e?this:{},n=t;return r.create=function(e,t,i,a){return r[e]={ptr:n.createFramebuffer(),name:e,type:t||"float",width:i[0]||1024,height:i[1]||1024,texture:a||null},n.bindFramebuffer(n.FRAMEBUFFER,r[e].ptr),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,r[e].texture.ptr,0),n.bindFramebuffer(n.FRAMEBUFFER,null),r[e].enableRead=function(e){this.texture.link(e)},r[e].delete=function(){n.bindRenderbuffer(gl.RENDERBUFFER,null),n.bindFramebuffer(gl.FRAMEBUFFER,null),n.deleteRenderbuffer(this.renderbuffer),n.deleteTexture(this.texture.ptr),n.deleteFramebuffer(this.ptr)},r[e]},r}(c),h=new function(e,t){var r={},n=c,i={};function a(e,t,r){var n=e.createShader(t);if(e.shaderSource(n,r),e.compileShader(n),e.getShaderParameter(n,e.COMPILE_STATUS))return n;console.log(e.getShaderInfoLog(n)),e.deleteShader(n)}return r.create=function(e,t,r){e=e||"default",t=t||"default",r=r||"default";var a=[];if(i.hasOwnProperty(e)&&this.delete(e),i[e]=n.createProgram(),i[e].vs=t,i[e].fs=r,n.attachShader(i[e],i[e].vs),n.attachShader(i[e],i[e].fs),n.linkProgram(i[e]),!n.getProgramParameter(i[e],n.LINK_STATUS))throw"Error in program linking:"+n.getProgramInfoLog(i[e]);a=(a=a.concat(i[e].vs.deps)).concat(i[e].fs.deps),i[e].deps=a},r.use=function(e,r,u){if(i.hasOwnProperty(e))return n.useProgram(i[e]),t.link(i[e],i[e].deps),i[e];var o=a(n,n.VERTEX_SHADER,r),s=a(n,n.FRAGMENT_SHADER,u);return o.deps=[],r.split(["\n"]).forEach(function(e){var t=e.split([" ",";"]);"attribute"!==t[0]&&"uniform"!==t[0]||o.deps.push(t[2])}),s.deps=[],u.split(["\n"]).forEach(function(e){var t=e.split([" ",";"]);"attribute"!==t[0]&&"uniform"!==t[0]||s.deps.push(t[2])}),this.create(e,o,s),n.useProgram(i[e]),t.link(i[e],i[e].deps),i[e]},r.delete=function(e){i.hasOwnProperty(e)&&(n.detachShader(i[e],i[e].vs),n.detachShader(i[e],i[e].fs),n.deleteProgram(i[e]),delete i[e])},r.shader=function(e,t){var n=e;return shaders.create(n,t),r},r.vertex=function(e){var t={type:"vertex"};return e.name&&(t.name=e.name),shaders.create(t,e)},r.fragment=function(e){var t={type:"fragment"};return e.name&&(t.name=e.name),shaders.create(t,e)},r}(0,l),p=null,m=c.getExtension("EXT_blend_minmax");function y(e){Array.isArray(e)||(e=[e]),e.forEach(function(e){var t=c.getExtension(e);null!==t&&Object.keys(t).forEach(function(e){ext.hasOwnProperty(e)||(c.ext[e]=t[e])})})}return m&&(c.MAX_EXT=m.MAX_EXT,c.MIN_EXT=m.MIN_EXT),c.ext=c.getExtension("ANGLE_instanced_arrays"),y(["OES_texture_float","OES_texture_float_linear"]),a&&a.appendChild(u),r.enableExtension=y,r.attribute=function(e,t,n){return l.allocate("attribute",e,t,n),r.attribute.hasOwnProperty(e)||Object.defineProperty(r.attribute,e,{get:()=>l.attribute[e],set(t){l.attribute[e].load(t)}}),r},r.uniform=function(e,t,n){return l.allocate("uniform",e,t,n),r.uniform.hasOwnProperty(e)||Object.defineProperty(r.uniform,e,{get:function(){return l.uniform[e]},set:function(t){l.uniform[e].load(t),c.isProgram(p)&&l.uniform[e].link(p)}}),r},r.uniform.serialize=function(e){var t=[];return e.forEach(function(e){t=t.concat(e)}),t},r.texture=function(e,t,n,i,a,u){return l.allocate("texture",e,t,i,a,n,u),Object.defineProperty(r.texture,e,{get:function(){return l.texture[e]},set:function(t){l.texture[e].load(t)}}),r},r.texture.update=function(e,t,r,n){l.texture[e].update(t,r,n)},r.varying=function(e,t,n){return l.allocate("varying",e,t,n),r},r.framebuffer=function(e,t,n,i){return i=i||l.allocate("texture",e,t,n,"rgba",null),d.create(e,t,n,i),r.framebuffer.hasOwnProperty(e)||Object.defineProperty(r.framebuffer,e,{get:function(){return d[e]}}),r},r.bindFramebuffer=function(e){null===e?c.bindFramebuffer(c.FRAMEBUFFER,null):c.bindFramebuffer(c.FRAMEBUFFER,d[e].ptr)},r.subroutine=function(e,t,n){return l.allocate("subroutine",e,t,n),r},r.parameter=function(e){return Object.keys(e).forEach(function(t){if(c._dict[t]=e[t],Array.isArray(c._dict[t])){var r=0;Object.defineProperty(c._dict,t,{get:function(){return e[t][r++]},set:function(e){r=0,c._dict[t]=e}})}else if("object"==typeof c._dict[t]){var n=Object.keys(c._dict[t]);fxgl.uniform("dict"+t,"float",n.map(e=>c._dict[t][e]))}}),r},r.dictionary=r.parameter,r.shader=h.shader,r.app=function(e,t,r){0===r?(c.viewport(0,0,1024,1),p=h.use(e,t.vsource,t.fsource),this.bindFramebuffer("f_sum_texture")):1===r?(c.viewport(0,0,c.canvas.width,c.canvas.height),p=h.use(e,t.vsource,t.fsource),this.bindFramebuffer(null)):2===r?(this.bindFramebuffer(null),c.viewport(0,0,1024,1),p=h.use(e,t.vsource,t.fsource),this.bindFramebuffer("f_mem_texture_1")):3===r?(this.bindFramebuffer(null),c.viewport(0,0,1024,1),p=h.use(e,t.vsource,t.fsource),this.bindFramebuffer("f_mem_texture_0")):4===r?(c.viewport(0,0,c.canvas.width,c.canvas.height),p=h.use(e,t.vsource,t.fsource),this.bindFramebuffer(null)):5===r&&(c.viewport(0,0,c.canvas.width,c.canvas.height),p=h.use(e,t.vsource,t.fsource),this.bindFramebuffer(null)),c.drawArrays(c.LINES,0,2)},r.dimension=function(){return[u.width,u.height]},r})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,